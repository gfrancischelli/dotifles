const Actor = require('./actor.js');


function Theatre() {
    
    var actors = [];
    const events = {};

    const handlers = {
        unsub: (actor) => off(actor),
        emit: actor => actor.then(trigger),
    }

    function trigger(event) {
        events[event].forEach(applyHandlers)
    }
    
    function applyHandlers(actor) {
        actor.handlers
             .map(fn => handlers[fn])
             .reduce( (self, fn) => fn(self), actor)
    }

    function subscribe(actor) {
        events[actor.event] = events[actor.events] || [];
        events[actor.event].push(actor);
    }



    function off(actor) {
        events[actor.event] =
            events[actor.event].filter( a => a != actor)
    }



    function trigger(e) {
        events[e]
          .forEach( animation => animation.then( event => trigger(event)))
    }



    function init() {
        actors = Array.from(document.querySelectorAll('[data-act]') ).map(Actor)
        
        actors.forEach( actor => subscribe( actor.event, actor))
        
        console.log('actor[]', actors);
    }


    function addNewActor(config) {
        let new_actor = newActor(config);
        actors.push(new_actor);
        subscribe( new_actor );
    }

    function nodeToActor(node){
        let config = nodeToConfig(node)
        
        
    }

    return { 
        init: init,
        trigger: trigger,
        addNewActor: addNewActor,
    }
}


module.exports = Theatre;
